name: AFGL Tournament Monitor

on:
  schedule:
    # Runs daily at 9 AM UTC (adjust as needed)
    - cron: '0 9 * * *'
  workflow_dispatch: # Allows manual triggering

jobs:
  monitor:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Monitor AFGL tournament schedule
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        TARGET_URL: 'https://afgl.bluegolf.com/bluegolf/afgl25/schedule/index.htm'
      run: |
        # Create monitoring script
        cat > monitor.js << 'EOF'
        const https = require('https');
        const http = require('http');
        const fs = require('fs');
        const crypto = require('crypto');
        
        const TARGET_URL = process.env.TARGET_URL;
        const DISCORD_WEBHOOK_URL = process.env.DISCORD_WEBHOOK_URL;
        const HASH_FILE = 'page_hash.txt';
        
        // Function to fetch webpage content
        function fetchPage(url) {
          return new Promise((resolve, reject) => {
            const client = url.startsWith('https') ? https : http;
            client.get(url, (res) => {
              let data = '';
              res.on('data', chunk => data += chunk);
              res.on('end', () => resolve(data));
            }).on('error', reject);
          });
        }
        
        // Function to clean content for tournament table focus
        function cleanContent(html) {
          // Remove common dynamic elements that change frequently
          let cleaned = html
            // Remove timestamps and dates that might change
            .replace(/\d{1,2}\/\d{1,2}\/\d{4}/g, 'DATE')
            .replace(/\d{1,2}:\d{2}(?::\d{2})?\s*(?:AM|PM)?/gi, 'TIME')
            // Remove potential session IDs or dynamic parameters
            .replace(/sessionid=[\w\d]+/gi, '')
            .replace(/timestamp=[\w\d]+/gi, '')
            // Remove extra whitespace
            .replace(/\s+/g, ' ')
            .trim();
          
          // Try to extract table content if possible
          const tableMatch = cleaned.match(/<table[\s\S]*?<\/table>/gi);
          if (tableMatch && tableMatch.length > 0) {
            // Focus on table content only
            return tableMatch.join('');
          }
          
          return cleaned;
        }
        
        // Function to send Discord notification
        function sendDiscordNotification(message) {
          return new Promise((resolve, reject) => {
            const url = new URL(DISCORD_WEBHOOK_URL);
            
            // Clean the message to avoid JSON issues
            const cleanMessage = message
              .replace(/[\u0000-\u001F\u007F-\u009F]/g, '') // Remove control characters
              .replace(/"/g, '\\"') // Escape quotes
              .replace(/\\/g, '\\\\') // Escape backslashes
              .substring(0, 1900); // Discord has a 2000 char limit
            
            const payload = JSON.stringify({
              content: cleanMessage,
              username: 'AFGL Tournament Monitor'
            });
            
            console.log(`Payload length: ${payload.length}`);
            console.log(`Payload preview: ${payload.substring(0, 200)}...`);
            
            const options = {
              hostname: url.hostname,
              path: url.pathname + url.search,
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Content-Length': Buffer.byteLength(payload, 'utf8')
              }
            };
            
            const req = https.request(options, (res) => {
              let responseData = '';
              res.on('data', chunk => responseData += chunk);
              res.on('end', () => {
                console.log(`Discord response status: ${res.statusCode}`);
                if (res.statusCode !== 204 && res.statusCode !== 200) {
                  console.log(`Discord response: ${responseData}`);
                } else {
                  console.log('Discord notification sent successfully!');
                }
                resolve(res.statusCode);
              });
            });
            
            req.on('error', (error) => {
              console.error('Discord webhook error:', error);
              reject(error);
            });
            req.write(payload);
            req.end();
          });
        }
        
        async function main() {
          try {
            console.log(`Checking AFGL tournament schedule...`);
            
            // Fetch current page content
            const rawContent = await fetchPage(TARGET_URL);
            const cleanedContent = cleanContent(rawContent);
            const currentHash = crypto.createHash('sha256').update(cleanedContent).digest('hex');
            
            console.log(`Content length: ${rawContent.length} chars`);
            console.log(`Cleaned content length: ${cleanedContent.length} chars`);
            console.log(`Current hash: ${currentHash}`);
            
            // Check if hash file exists
            let previousHash = '';
            if (fs.existsSync(HASH_FILE)) {
              previousHash = fs.readFileSync(HASH_FILE, 'utf8').trim();
              console.log(`Previous hash: ${previousHash}`);
            }
            
            // Compare hashes
            if (previousHash && currentHash !== previousHash) {
              console.log('üèÜ Tournament schedule change detected! Sending notification...');
              const message = `üèÜ **AFGL Tournament Schedule Updated!** The tournament schedule has been updated: ${TARGET_URL}
              Check for new tournaments, date changes, or other updates!`;
              await sendDiscordNotification(message);
              console.log('Discord notification sent!');
            } else if (!previousHash) {
              console.log('First run - baseline created');
              const message = `‚úÖ **AFGL Tournament Monitor Started**\n\nNow monitoring AFGL tournament schedule: ${TARGET_URL}\n\nYou'll be notified when tournaments are added, changed, or updated.`;
              await sendDiscordNotification(message);
            } else {
              console.log('No tournament schedule changes detected');
            }
            
            // Save current hash
            fs.writeFileSync(HASH_FILE, currentHash);
            
          } catch (error) {
            console.error('Error:', error);
            await sendDiscordNotification(`‚ùå **AFGL Monitor Error**\n\nFailed to check tournament schedule:\n${error.message}`);
          }
        }
        
        main();
        EOF
        
        # Run the monitoring script
        node monitor.js
        
    - name: Commit hash file
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add page_hash.txt
        git diff --staged --quiet || git commit -m "Update AFGL schedule hash"
        git push
