name: AFGL Tournament Monitor

on:
  schedule:
    # Runs daily at 9 AM UTC (adjust as needed)
    - cron: '0 9 * * *'
  workflow_dispatch: # Allows manual triggering

jobs:
  monitor:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Monitor AFGL tournament schedule
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        TARGET_URL: 'https://afgl.bluegolf.com/bluegolf/afgl25/schedule/index.htm'
      run: |
        # Create monitoring script
        cat > monitor.js << 'EOF'
        const https = require('https');
        const http = require('http');
        const fs = require('fs');
        const crypto = require('crypto');
        
        const TARGET_URL = process.env.TARGET_URL;
        const DISCORD_WEBHOOK_URL = process.env.DISCORD_WEBHOOK_URL;
        const TOURNAMENT_COUNT_FILE = 'tournament_count.txt';
        const TOURNAMENT_DATA_FILE = 'tournament_data.json';
        
        // Function to fetch webpage content
        function fetchPage(url) {
          return new Promise((resolve, reject) => {
            const client = url.startsWith('https') ? https : http;
            client.get(url, (res) => {
              let data = '';
              res.on('data', chunk => data += chunk);
              res.on('end', () => resolve(data));
            }).on('error', reject);
          });
        }
        
        // Function to extract tournament information from HTML
        function extractTournaments(html) {
          const tournaments = [];
          
          // Look for table rows that contain tournament data
          // This regex looks for table rows with tournament-like content
          const rowRegex = /<tr[^>]*>(.*?)<\/tr>/gis;
          const cellRegex = /<td[^>]*>(.*?)<\/td>/gis;
          
          let match;
          while ((match = rowRegex.exec(html)) !== null) {
            const rowContent = match[1];
            const cells = [];
            let cellMatch;
            
            while ((cellMatch = cellRegex.exec(rowContent)) !== null) {
              // Clean cell content
              const cellText = cellMatch[1]
                .replace(/<[^>]*>/g, '') // Remove HTML tags
                .replace(/&nbsp;/g, ' ') // Replace non-breaking spaces
                .replace(/\s+/g, ' ') // Normalize whitespace
                .trim();
              
              if (cellText) {
                cells.push(cellText);
              }
            }
            
            // If the row has multiple cells and looks like tournament data
            // (adjust this logic based on the actual table structure)
            if (cells.length >= 3) {
              // Skip header rows or rows that don't look like tournaments
              const rowText = cells.join(' ').toLowerCase();
              if (!rowText.includes('tournament') && 
                  !rowText.includes('date') && 
                  !rowText.includes('time') &&
                  !rowText.includes('location') &&
                  cells.some(cell => cell.length > 2)) {
                
                // Create a normalized tournament identifier
                const tournamentId = cells.slice(0, 3).join('|').toLowerCase()
                  .replace(/[^a-z0-9\s]/g, '')
                  .replace(/\s+/g, ' ')
                  .trim();
                
                if (tournamentId) {
                  tournaments.push({
                    id: tournamentId,
                    cells: cells,
                    raw: cells.join(' | ')
                  });
                }
              }
            }
          }
          
          return tournaments;
        }
        
        // Function to send Discord notification
        function sendDiscordNotification(message) {
          return new Promise((resolve, reject) => {
            const url = new URL(DISCORD_WEBHOOK_URL);
            
            const cleanMessage = message
              .replace(/[\u0000-\u001F\u007F-\u009F]/g, '')
              .replace(/"/g, '\\"')
              .replace(/\\/g, '\\\\')
              .substring(0, 1900);
            
            const payload = JSON.stringify({
              content: cleanMessage,
              username: 'AFGL Tournament Monitor'
            });
            
            console.log(`Payload length: ${payload.length}`);
            
            const options = {
              hostname: url.hostname,
              path: url.pathname + url.search,
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Content-Length': Buffer.byteLength(payload, 'utf8')
              }
            };
            
            const req = https.request(options, (res) => {
              let responseData = '';
              res.on('data', chunk => responseData += chunk);
              res.on('end', () => {
                console.log(`Discord response status: ${res.statusCode}`);
                if (res.statusCode !== 204 && res.statusCode !== 200) {
                  console.log(`Discord response: ${responseData}`);
                } else {
                  console.log('Discord notification sent successfully!');
                }
                resolve(res.statusCode);
              });
            });
            
            req.on('error', (error) => {
              console.error('Discord webhook error:', error);
              reject(error);
            });
            req.write(payload);
            req.end();
          });
        }
        
        async function main() {
          try {
            console.log(`Checking AFGL tournament schedule...`);
            
            // Fetch current page content
            const rawContent = await fetchPage(TARGET_URL);
            const currentTournaments = extractTournaments(rawContent);
            
            console.log(`Found ${currentTournaments.length} tournaments`);
            
            // Load previous tournament data
            let previousTournaments = [];
            let previousCount = 0;
            
            if (fs.existsSync(TOURNAMENT_DATA_FILE)) {
              try {
                const previousData = JSON.parse(fs.readFileSync(TOURNAMENT_DATA_FILE, 'utf8'));
                previousTournaments = previousData.tournaments || [];
                previousCount = previousData.count || 0;
                console.log(`Previous tournament count: ${previousCount}`);
              } catch (error) {
                console.log('Could not read previous tournament data, treating as first run');
              }
            }
            
            // Compare tournaments
            const currentCount = currentTournaments.length;
            const previousIds = new Set(previousTournaments.map(t => t.id));
            const currentIds = new Set(currentTournaments.map(t => t.id));
            
            // Find new tournaments
            const newTournaments = currentTournaments.filter(t => !previousIds.has(t.id));
            
            // Only alert if there are genuinely new tournaments
            if (newTournaments.length > 0) {
              console.log(`üèÜ ${newTournaments.length} new tournament(s) detected!`);
              
              let message = `üèÜ **${newTournaments.length} New Tournament(s) Added!**\n\n`;
              message += `${TARGET_URL}\n\n`;
              message += `**New tournaments:**\n`;
              
              newTournaments.forEach((tournament, index) => {
                message += `${index + 1}. ${tournament.raw}\n`;
              });
              
              message += `\nTotal tournaments: ${currentCount} (was ${previousCount})`;
              
              await sendDiscordNotification(message);
              console.log('Discord notification sent for new tournaments!');
              
            } else if (previousCount === 0) {
              // First run - send baseline notification
              console.log('First run - establishing baseline');
              const message = `‚úÖ **AFGL Tournament Monitor Active**\n\n` +
                            `Now monitoring: ${TARGET_URL}\n\n` +
                            `Current tournament count: ${currentCount}\n\n` +
                            `You'll be notified when new tournaments are added.`;
              await sendDiscordNotification(message);
              
            } else {
              console.log('No new tournaments detected');
              
              // Optional: Log if tournaments were removed (uncomment if desired)
              // const removedTournaments = previousTournaments.filter(t => !currentIds.has(t.id));
              // if (removedTournaments.length > 0) {
              //   console.log(`Note: ${removedTournaments.length} tournament(s) appear to have been removed`);
              // }
            }
            
            // Save current tournament data
            const currentData = {
              count: currentCount,
              tournaments: currentTournaments,
              lastChecked: new Date().toISOString()
            };
            
            fs.writeFileSync(TOURNAMENT_DATA_FILE, JSON.stringify(currentData, null, 2));
            fs.writeFileSync(TOURNAMENT_COUNT_FILE, currentCount.toString());
            
          } catch (error) {
            console.error('Error:', error);
            await sendDiscordNotification(`‚ùå **AFGL Monitor Error**\n\nFailed to check tournament schedule:\n${error.message}`);
          }
        }
        
        main();
        EOF
        
        # Run the monitoring script
        node monitor.js
        
    - name: Commit tournament data
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add tournament_count.txt tournament_data.json
        git diff --staged --quiet || git commit -m "Update AFGL tournament data"
        git push
